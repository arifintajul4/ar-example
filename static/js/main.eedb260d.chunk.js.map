{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Model","gltf","useLoader","GLTFLoader","scene","traverse","node","isMesh","castShadow","scale","object","position","receiveShadow","rotation","Math","PI","attach","opacity","Lights","intensity","color","App","useState","placementMode","setPlacementMode","shadows","environmentMap","poseMode","placementCameraOffset","fallback","Html","style","fontWeight","id","role","onKeyPress","currentPlacementMode","tabIndex","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAWA,SAASA,IACP,IAAMC,EAAOC,oBAAUC,IAAY,oBAMnC,OALAF,EAAKG,MAAMC,UAAS,SAACC,GACfA,EAAKC,SACPD,EAAKE,YAAa,MAIpB,kCACE,2BAAWA,YAAU,EAACC,MAAM,MAAMC,OAAQT,EAAKG,MAAOO,SAAS,MAC/D,uBAAMC,eAAa,EAACC,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAAhD,UACE,qCAAqBC,OAAO,aAC5B,gCAAgBA,OAAO,WAAWC,QAAS,WAMnD,SAASC,IACP,OACE,kCACE,8BAAcC,UAAW,GAAKC,MAAM,UACpC,kCACEZ,YAAU,EACVG,SAAU,CAAC,EAAG,GAAI,GAClBQ,UAAW,GACX,cAAa,KACb,sBAAqB,EACrB,sBAAqB,EACrB,oBAAmB,EACnB,wBAAuB,EACvB,qBAAoB,GACpB,oBAAmB,GACnB,uBAAsB,EACtB,uBAAsB,KACtB,wBAAuB,UAmDhBE,MA7Cf,WACE,MAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,OACE,qCACE,cAAC,uBAAD,IACA,eAAC,eAAD,CAAcC,SAAO,EAArB,UACE,cAAC,eAAD,CAAcC,gBAAc,EAACC,SAAS,kBACtC,eAAC,iBAAD,CACEJ,cAAeA,EACfK,sBAAuB,CAAC,EAAG,GAAI,GAFjC,UAIE,cAAC,WAAD,CACEC,SACE,cAACC,EAAA,EAAD,UACE,qBAAKC,MAAO,CAAEX,MAAO,QAASY,WAAY,QAA1C,gCAHN,SASE,cAAChC,EAAD,MAEF,cAACkB,EAAD,UAGJ,sBACEe,GAAG,gBACHC,KAAK,SACLC,WAAY,WACVX,GAAiB,SAACY,GAAD,OAA2BA,MAE9CC,SAAU,EACVC,QAAS,WACPd,GAAiB,SAACY,GAAD,OAA2BA,MARhD,wBAYGb,EAAgB,UAAY,YAZ/B,oBChESgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eedb260d.chunk.js","sourcesContent":["import React, { Suspense, useState } from \"react\";\r\nimport {\r\n  ZapparCamera,\r\n  InstantTracker,\r\n  ZapparCanvas,\r\n  BrowserCompatibility,\r\n} from \"@zappar/zappar-react-three-fiber\";\r\nimport { useLoader } from \"@react-three/fiber\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport { Html } from \"@react-three/drei\";\r\n\r\nfunction Model() {\r\n  const gltf = useLoader(GLTFLoader, \"./assets/mug.glb\");\r\n  gltf.scene.traverse((node: any) => {\r\n    if (node.isMesh) {\r\n      node.castShadow = true;\r\n    }\r\n  });\r\n  return (\r\n    <group>\r\n      <primitive castShadow scale=\"0.5\" object={gltf.scene} position=\"0\" />\r\n      <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]}>\r\n        <planeBufferGeometry attach=\"geometry\" />\r\n        <shadowMaterial attach=\"material\" opacity={0.2} />\r\n      </mesh>\r\n    </group>\r\n  );\r\n}\r\n\r\nfunction Lights() {\r\n  return (\r\n    <group>\r\n      <ambientLight intensity={0.6} color=\"white\" />\r\n      <directionalLight\r\n        castShadow\r\n        position={[0, 30, 0]}\r\n        intensity={0.8}\r\n        shadow-bias={0.0001}\r\n        shadow-camera-right={4}\r\n        shadow-camera-left={-4}\r\n        shadow-camera-top={4}\r\n        shadow-camera-bottom={-4}\r\n        shadow-camera-near={0.1}\r\n        shadow-camera-far={50}\r\n        shadow-camera-radius={2}\r\n        shadow-mapSize-width={1024}\r\n        shadow-mapSize-height={1024}\r\n      />\r\n    </group>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [placementMode, setPlacementMode] = useState(true);\r\n\r\n  return (\r\n    <>\r\n      <BrowserCompatibility />\r\n      <ZapparCanvas shadows>\r\n        <ZapparCamera environmentMap poseMode=\"anchor-origin\" />\r\n        <InstantTracker\r\n          placementMode={placementMode}\r\n          placementCameraOffset={[0, 0, -2]}\r\n        >\r\n          <Suspense\r\n            fallback={\r\n              <Html>\r\n                <div style={{ color: \"white\", fontWeight: \"bold\" }}>\r\n                  Model Loading...\r\n                </div>\r\n              </Html>\r\n            }\r\n          >\r\n            <Model />\r\n          </Suspense>\r\n          <Lights />\r\n        </InstantTracker>\r\n      </ZapparCanvas>\r\n      <div\r\n        id=\"zappar-button\"\r\n        role=\"button\"\r\n        onKeyPress={() => {\r\n          setPlacementMode((currentPlacementMode) => !currentPlacementMode);\r\n        }}\r\n        tabIndex={0}\r\n        onClick={() => {\r\n          setPlacementMode((currentPlacementMode) => !currentPlacementMode);\r\n        }}\r\n      >\r\n        Tap here to\r\n        {placementMode ? \" place \" : \" pick up \"}\r\n        the object\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}