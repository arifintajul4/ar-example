{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Model","active","mesh","gltf","useLoader","GLTFLoader","scene","traverse","node","isMesh","castShadow","ref","onClick","alert","scale","object","position","Lights","intensity","color","App","useState","placementMode","setPlacementMode","setActive","useRef","environmentMap","poseMode","placementCameraOffset","fallback","Html","style","fontWeight","width","id","role","onKeyPress","currentPlacementMode","tabIndex","right","top","current","rotation","y","left","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAYA,SAASA,EAAT,GAAmE,EAAlDC,OAAmD,IAA3CC,EAA0C,EAA1CA,KACjBC,EAAOC,oBAAUC,IAAY,wBAanC,OAZAF,EAAKG,MAAMC,UAAS,SAACC,GACfA,EAAKC,SACPD,EAAKE,YAAa,MAWpB,gCACE,2BACEC,IAAKT,EACLQ,YAAU,EACVE,QAAS,kBAAMC,MAAM,SACrBC,MAAM,QAENC,OAAQZ,EAAKG,MACbU,SAAU,CAAC,EAAG,EAAG,OAMzB,SAASC,IACP,OACE,kCACE,8BAAcC,UAAW,GAAKC,MAAM,UACpC,kCACET,YAAU,EACVM,SAAU,CAAC,EAAG,GAAI,GAClBE,UAAW,GACX,cAAa,KACb,sBAAqB,EACrB,sBAAqB,EACrB,oBAAmB,EACnB,wBAAuB,EACvB,qBAAoB,GACpB,oBAAmB,GACnB,uBAAsB,EACtB,uBAAsB,KACtB,wBAAuB,UA+FhBE,MAzFf,WACE,MAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA4BF,oBAAS,GAArC,mBAAOpB,EAAP,KAAeuB,EAAf,KACMtB,EAAOuB,iBAAY,MASzB,OACE,qCACE,cAAC,uBAAD,IACA,eAAC,eAAD,WACE,cAAC,eAAD,CAAcC,gBAAc,EAACC,SAAS,kBACtC,eAAC,iBAAD,CACEL,cAAeA,EACfM,sBAAuB,CAAC,EAAG,GAAI,GAFjC,UAIE,cAAC,WAAD,CACEC,SACE,cAACC,EAAA,EAAD,UACE,qBACEC,MAAO,CACLZ,MAAO,QACPa,WAAY,OACZC,MAAO,SAJX,gCAHN,SAeE,cAACjC,EAAD,CAAOC,OAAQA,EAAQC,KAAMA,MAK/B,cAACe,EAAD,UAGJ,sBACEiB,GAAG,gBACHC,KAAK,SACLC,WAAY,WACVZ,GAAWvB,GACXsB,GAAiB,SAACc,GAAD,OAA2BA,MAE9CC,SAAU,EACV1B,QAAS,WACPY,GAAWvB,GACXsB,GAAiB,SAACc,GAAD,OAA2BA,MAVhD,wBAcGf,EAAgB,UAAY,YAd/B,gBAiBA,wBACES,MAAO,CACLf,SAAU,QACVuB,MAAO,GACPC,IAAK,QAEPJ,WAAY,aACZE,SAAU,EACV1B,QAjEoB,WACxBV,EAAKuC,QAAQC,SAASC,EAAIzC,EAAKuC,QAAQC,SAASC,GAAK,IAwDnD,0BAYA,wBACEZ,MAAO,CACLf,SAAU,QACV4B,KAAM,GACNJ,IAAK,QAEPJ,WAAY,aACZE,SAAU,EACV1B,QAzEmB,WACvBV,EAAKuC,QAAQC,SAASC,EAAIzC,EAAKuC,QAAQC,SAASC,GAAK,IAgEnD,8BC3HSE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.71993b1d.chunk.js","sourcesContent":["import React, { Suspense, useRef, useState } from \"react\";\r\nimport {\r\n  ZapparCamera,\r\n  InstantTracker,\r\n  ZapparCanvas,\r\n  BrowserCompatibility,\r\n} from \"@zappar/zappar-react-three-fiber\";\r\nimport { useLoader } from \"@react-three/fiber\";\r\nimport Hammer from \"react-hammerjs\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport { Html } from \"@react-three/drei\";\r\n\r\nfunction Model({ active, mesh }: { active?: boolean; mesh?: any }) {\r\n  const gltf = useLoader(GLTFLoader, \"./assets/old_car.glb\");\r\n  gltf.scene.traverse((node: any) => {\r\n    if (node.isMesh) {\r\n      node.castShadow = true;\r\n    }\r\n  });\r\n\r\n  // useFrame(() => {\r\n  //   if (active) {\r\n  //     mesh.current.rotation.y = mesh.current.rotation.y += 0.01;\r\n  //   }\r\n  // });\r\n\r\n  return (\r\n    <group>\r\n      <primitive\r\n        ref={mesh}\r\n        castShadow\r\n        onClick={() => alert(\"asas\")}\r\n        scale=\"0.003\"\r\n        // rotation={[0, 90, 0]}\r\n        object={gltf.scene}\r\n        position={[0, 0, 0]}\r\n      />\r\n    </group>\r\n  );\r\n}\r\n\r\nfunction Lights() {\r\n  return (\r\n    <group>\r\n      <ambientLight intensity={0.6} color=\"white\" />\r\n      <directionalLight\r\n        castShadow\r\n        position={[0, 30, 0]}\r\n        intensity={0.8}\r\n        shadow-bias={0.0001}\r\n        shadow-camera-right={4}\r\n        shadow-camera-left={-4}\r\n        shadow-camera-top={4}\r\n        shadow-camera-bottom={-4}\r\n        shadow-camera-near={0.1}\r\n        shadow-camera-far={50}\r\n        shadow-camera-radius={2}\r\n        shadow-mapSize-width={1024}\r\n        shadow-mapSize-height={1024}\r\n      />\r\n    </group>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [placementMode, setPlacementMode] = useState(true);\r\n  const [active, setActive] = useState(false);\r\n  const mesh = useRef<any>(null);\r\n  const handleRotateRight = () => {\r\n    mesh.current.rotation.y = mesh.current.rotation.y += 0.1;\r\n  };\r\n\r\n  const handleRotateLeft = () => {\r\n    mesh.current.rotation.y = mesh.current.rotation.y -= 0.1;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BrowserCompatibility />\r\n      <ZapparCanvas>\r\n        <ZapparCamera environmentMap poseMode=\"anchor-origin\" />\r\n        <InstantTracker\r\n          placementMode={placementMode}\r\n          placementCameraOffset={[0, 0, -2]}\r\n        >\r\n          <Suspense\r\n            fallback={\r\n              <Html>\r\n                <div\r\n                  style={{\r\n                    color: \"white\",\r\n                    fontWeight: \"bold\",\r\n                    width: \"100vw\",\r\n                  }}\r\n                >\r\n                  Model Loading...\r\n                </div>\r\n              </Html>\r\n            }\r\n          >\r\n            <Model active={active} mesh={mesh} />\r\n            {/* <Hammer>\r\n              <Model active={active} mesh={mesh} />\r\n            </Hammer> */}\r\n          </Suspense>\r\n          <Lights />\r\n        </InstantTracker>\r\n      </ZapparCanvas>\r\n      <div\r\n        id=\"zappar-button\"\r\n        role=\"button\"\r\n        onKeyPress={() => {\r\n          setActive(!active);\r\n          setPlacementMode((currentPlacementMode) => !currentPlacementMode);\r\n        }}\r\n        tabIndex={0}\r\n        onClick={() => {\r\n          setActive(!active);\r\n          setPlacementMode((currentPlacementMode) => !currentPlacementMode);\r\n        }}\r\n      >\r\n        Tap here to\r\n        {placementMode ? \" place \" : \" pick up \"}\r\n        the object\r\n      </div>\r\n      <button\r\n        style={{\r\n          position: \"fixed\",\r\n          right: 10,\r\n          top: \"50vh\",\r\n        }}\r\n        onKeyPress={() => {}}\r\n        tabIndex={0}\r\n        onClick={handleRotateRight}\r\n      >\r\n        rotate right\r\n      </button>\r\n      <button\r\n        style={{\r\n          position: \"fixed\",\r\n          left: 10,\r\n          top: \"50vh\",\r\n        }}\r\n        onKeyPress={() => {}}\r\n        tabIndex={0}\r\n        onClick={handleRotateLeft}\r\n      >\r\n        rotate right\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}